name: Snap Schedule (bleeding)

on:
  workflow_dispatch:
    inputs:
      channel:
        description: "The channel to snap"
        default: bleeding
        required: true
        type: choice
        options:
          - bleeding
  # push:
  #   branches:
  #     - main
  # schedule:
  #   # run every 2 hours at 5 minutes past the hour
  #   - cron: '5 */2 * * *'

jobs:
  snap:
    name: Invoke Snap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - { arch: universal, os: ubuntu-latest, is_core: true }
          - { arch: x86_64-unknown-linux, os: ubuntu-latest }
          - { arch: x86_64-pc-windows, os: windows-latest }
          - { arch: aarch64-apple-darwin, os: macos-latest }
          - { arch: x86_64-apple-darwin, os: macos-13 }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout Deployed
        uses: actions/checkout@v4
        with:
          repository: chawyehsu/moonbit-binaries
          ref: gh-pages
          path: ./tmp/dist

      - name: Snap Core
        if: ${{ matrix.is_core == true }}
        shell: pwsh
        run: ./snapV2.ps1 -Channel ${{ github.event.inputs.channel || 'bleeding' }} -NoVersionConsistencyCheck:$true

      - name: Upload Core
        if: ${{ matrix.is_core == true }}
        uses: actions/upload-artifact@v4
        with:
          name: component-moonbit-core
          path: ./tmp/gha-artifacts/*

      - name: Snap Toolchain
        if: ${{ matrix.is_core != true }}
        shell: pwsh
        run: ./snapV2.ps1 -SnapToolchain -Channel ${{ github.event.inputs.channel || 'bleeding' }}

      - name: Upload Toolchain
        if: ${{ matrix.is_core != true }}
        uses: actions/upload-artifact@v4
        with:
          name: component-moonbit-toolchain-${{ matrix.arch }}
          path: ./tmp/gha-artifacts/*

  merge:
    needs: snap
    name: Deploy Index
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout Deployed
        uses: actions/checkout@v4
        with:
          repository: chawyehsu/moonbit-binaries
          ref: gh-pages
          path: ./tmp/dist

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./tmp/gha-artifacts
          pattern: component-*
          merge-multiple: true

      - name: Validate Artifacts
        id: validate_artifacts
        shell: pwsh
        run: |
          if (Test-Path -Path ./tmp/gha-artifacts) {
            $artifacts = Get-ChildItem -Path ./tmp/gha-artifacts -File
            Write-Host "Artifacts count: $($artifacts.Count)"
            if ($artifacts.Count -gt 0) {
              "SHOULD_MERGE=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              return
            }
          }
          Write-Host "INFO: No artifacts found."

      - name: Merge Index
        id: merge_index
        if: ${{ steps.validate_artifacts.outputs.SHOULD_MERGE }}
        shell: pwsh
        run: ./snapV2.ps1 -Merge -Channel ${{ github.event.inputs.channel || 'bleeding' }} -NoVersionConsistencyCheck:$true && "SHOULD_DEPLOY=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Generate Release Body
        id: generate_body
        if: ${{ steps.merge_index.outputs.SHOULD_DEPLOY }}
        shell: pwsh
        run: |
          $channels = (Get-Content -Path ./tmp/dist/v2/index.json -Raw | ConvertFrom-Json -AsHashtable).channels
          $channel = $channels | Where-Object { $_.name -eq '${{ github.event.inputs.channel || 'bleeding' }}' } | Select-Object -First 1
          if (-not $channel) {
            Write-Host "ERROR: Channel '${{ github.event.inputs.channel || 'bleeding' }}' not found in index."
            exit 1
          }
          $version = $channel.version
          $commit = $channel.core
          if (-not $version -or -not $commit) {
            Write-Host "ERROR: Version or commit not found in channel."
            exit 1
          }
          Write-Host "Release : $version (core: $commit)"
          "BLEEDING_VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "BLEEDING_COMMIT=$commit" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # Remove this step when it's ready to deploy bleeding to main index
      - name: Reset Main Index
        shell: pwsh
        run: |
          Push-Location -Path ./tmp/dist
          git checkout v2/index.json
          Pop-Location

      - name: Create Release
        uses: ncipollo/release-action@v1
        if: ${{ github.ref == 'refs/heads/main' && steps.generate_body.outputs.BLEEDING_VERSION && steps.generate_body.outputs.BLEEDING_COMMIT }}
        with:
          allowUpdates: true
          prerelease: true
          tag: bleeding
          body: |
            MoonBit release bleeding (channel: ${{ github.event.inputs.channel || 'bleeding' }}) was archived.
            compiler: ${{ steps.generate_body.outputs.BLEEDING_VERSION }}
            core: ${{ steps.generate_body.outputs.BLEEDING_COMMIT }} [â†—](https://github.com/moonbitlang/core/commit/${{ steps.generate_body.outputs.BLEEDING_COMMIT }})
          artifacts: |
            ./tmp/gha-artifacts/moonbit-*

      - name: Deploy Index
        uses: peaceiris/actions-gh-pages@v4
        if: ${{ github.ref == 'refs/heads/main' && steps.generate_body.outputs.BLEEDING_VERSION }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./tmp/dist
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: update index
          keep_files: true

      - name: Cleanup
        uses: geekyeggo/delete-artifact@v5
        with:
          name: component-*
